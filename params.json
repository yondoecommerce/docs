{"name":"Developer Docs","tagline":"","body":"# Template Development #\r\n\r\n## What is an Expertory Template? ##\r\nIncluded with an [Expertory](http://www.expertory.com) account is a *hosted store website*. This provides a front-end for your customers to use when browsing your live session listings, and video-on-demand products. A highly customizable template engine provides the web content for this front-end. Every Expertory *store* uses either a standard template, or a custom installed template. **A template is basically a collection of html, css and other standard files you would find on a website.**\r\n\r\n## How do I develop a Template? ##\r\nGo to the [Expertory Partner Network](http://partners.expertory.com/signup) and sign up for a developer account. Here you can create and upload your template, and create a development store to test your template. The editing functions are quite basic, most developers create their template externally and just upload when done.\r\n\r\n###My template is empty, how do I get started?###\r\n[Download a Zip](https://github.com/expertory/classic-template/archive/master.zip) of the [sample classic template](https://github.com/expertory/classic-template) and upload it to the *files* section of your template. This will load the template with the files from the sample template.\r\n\r\n## Template Structure ##\r\nA template is made up of template files. These are regular html/liquid files, css, js etc. Templates which require server side rendering have a `.liquid` extension and use the [Liquid template engine](https://github.com/Shopify/liquid/wiki). \r\n\r\n### Root directory `/` ###\r\nThe root directory contains all of the `.liquid` files. The names of the `.liquid` files must match the page to be rendered. See each page section for more information.\r\n\r\n**Standard template files:**\r\n\r\n- base.liquid\r\n\r\nPages:\r\n\r\n- cancel-booking.liquid\r\n- checkout-complete.liquid\r\n- dashboard.liquid\r\n- forgot-password.liquid\r\n- home.liquid\r\n- listing.liquid\r\n- login.liquid\r\n- materials.liquid\r\n- package.liquid\r\n- page.liquid\r\n- profile.liquid\r\n- reset-password.liquid\r\n- search.liquid\r\n- session-calendar.liquid\r\n- video-search.liquid\r\n- video.liquid\r\n\r\nPartials:\r\n\r\n- custom-fields.liquid\r\n- listing-card.liquid\r\n- portfolio.liquid\r\n- video-player-scripts.liquid\r\n- video-player.liquid\r\n- video-purchase-partial.liquid\r\n\r\n### Assets directory `/assets` ###\r\nThis contains all of the files you want to reference from within your pages. Things like `.css`, `.less`, `.js`. These files must be in the `/assets` directory because this is where the `asset_url` filter references files.\r\n\r\nWithin the `/assets` directory you can lay out your files anyway you like, and use sub-directories many levels deep.\r\n\r\n#### .less files ####\r\n`.less` files can be used within the `/assets` directory. They will be processed server side. The sample template uses bootstrap `.less` files which are compiled dynamically. This allows you to make changes to a few settings in the `variables.less` to have great impact on your site.\r\n\r\n#### Store varables ####\r\n`.css` and `.less` files within the `/assets` directory can make use of liquid variables which are pumped into the file from settings related to the store. eg\r\n\r\n\t// assets/style.css\r\n\t.header {\r\n\t\tbackground-color: {{ store-header-color }};\r\n\t}\r\n\r\nCurrent store varables are:\r\n\r\n|Variable                 \t|Info                                                       \t|\r\n|-------------------------\t|-----------------------------------------------------------\t|\r\n| {{ store-header-color}} \t| The hex color set in the Store Settings &gt; Header Color \t|\r\n\r\n\r\n## Liquid Markup ##\r\nExpertory handles most of the standard liqiuid features including:\r\n\r\n* Extend (layout / master page). eg `{% extends base %}` use the `base.liquid` as the layout/master page.\r\n* Blocks defined in layout page. eg `{% block content %} Hello World {% endblock %}` fills the *content* block from the layout page.\r\n* Include (partials / snippets). eg `{% include mypartial %}` inserts `mypartial.liquid` into the page.\r\n* For loops.\r\n* If conditions.\r\n* Filters.\r\n\r\nMore details here: [Liquid for Designers](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers)\r\n\r\n### Custom Filters ###\r\nExpertory has some custom filters which can be used when referencing variables using Liquid.\r\n\r\n**HTML Filters**\r\n\r\n* `img_tag` - takes a URL (relative or absolute) and returns an image tag.\r\n* `stylesheet_tag` - takes a URL (relative or absolute) and returns a link tag.\r\n* `script_tag` - takes a URL (relative or absolute) and returns a script tag.\r\n* `meta_tags` - takes the page name (eg 'home', 'listing' etc) and returns a series of meta tags used for SEO. This should be added to the `<head>`.\r\n* `local_time` - takes a datetime in UTC and returns a `script` tag which renders the date as the browser's local time. **Requires moment.js.**\r\n* `from_x` - takes a datetime in UTC and returns a `script` tag which renders the date as a time from now in a human readable format. eg 'in 5 days'.\r\n\r\n**URL Filters**\r\n\r\n* `asset_url` - takes a relative reference to a file in the `/assets` folder and returns a public URL for the file. eg `{{ 'css/style.css' | asset_url }}` returns a public url for the `/assets/css/style.css` file. This URL may be served through a CDN for improved speed.\r\n\r\n> Note: Filters can be chained together. A common usage is like this:  \r\n> `{{ 'css/style.css' | asset_url | stylesheet_tag  }}` \r\n> which outputs:\r\n> `<link href='/cdn/1/assets/css/style.css' rel='stylesheet' type='text/css' media='all' />`\r\n\r\n**Money Filters**\r\n\r\n* `money` - takes a number and returns a formatted money using the store's currency symbol. eg '$25.00'. Zero is output as 'Free'.\r\n* `money_with_currency` - same as `money` but appends the ISO currency code. eg '$25.00 USD'.\r\n* `money_with_currency` - same as `money` but drops the currency symbol. eg \"25.00'.\r\n\r\n**JSON Filters**\r\n\r\n* `json` - takes the variable and outputs the JSON format. eg `'this is a string variable'` or `'{ prop: 'value' }'`\r\n\r\n> JSON filter is mostly used for rendering a liquid variable inside a `<script>` tag to use in javascript. eg:\r\n\r\n\t<script>\r\n\t\tvar listing = {{ listing | json }};\r\n\t</script>\r\nOutputs:\r\n\r\n    <script>\r\n    \tvar listing = { name:'sample', price:25 };\r\n    </script>\r\n\r\n\r\n# Template Data\r\nThe  following data objects are available on different template pages. \r\n\r\n## Store \r\n\r\nThis is an object to represent a store. It contains store information about what is the store's name, logo, header color, alias Url, subdomain Url and setting.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| id | *integer* An unique integer identifier of a store |\r\n| name | *string* The name of a store |\r\n| logo | *string* The logo URL of a store |\r\n| headerColor | *string* Header color of a store |\r\n| aliasUrl | *string* Alias URL of a store |\r\n| subdomainUrl | *string* Subdomain URL of a store |\r\n| setting | *Object* Additional settings enabled for the store. |\r\n\r\n## Team Member\r\n\r\nThis is an object to represent a team member in a store.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| id | *integer* An unique integer identifier of a team member |\r\n| displayName | *string* An unique display name of a team member |\r\n| url | *string* Relative URL of a team member's profile page |\r\n| profileDescription | *string* Description of a team member's profile |\r\n| profileImageUrl | *string* The URL of team member's profile image |\r\n| profileThumbUrl | *string* The URL of team member's profile image thumbnail size 50px x 50px |\r\n| profileThumb32Url | *string* The URL of team member's profile image thumbnail size 32px x 32px |\r\n| country | *string* The name of a team member's country |\r\n| qualificationsHtml | *string* Qualification that a team member hold. It contains html content. |\r\n| location | *string* Location of a team member |\r\n\r\n## Session\r\n\r\nThis is an object to represent current user's session. FirstName, LastName, DisplayName and ProfileImage are only shown when a user is logged in.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| loggedIn | *boolean* Login status of an user. It is true if an user is already logged in |\r\n| firstName | *string* First name of an user. It is null if an user is not logged in |\r\n| lastName | *string* Last name of an user. It is null if an user is not logged in |\r\n| displayName | *string* An unique display name of an user. It is null if an user is not logged in |\r\n| profileImage | *string* The URL of an user's profile image. It is null if an user is not logged in |\r\n\r\n## Listing\r\n\r\nThis is an object to represent a live session listing. It represents a single class/consultation for a specific duration and price.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| id | *integer* An unique integer identifier of a listing |\r\n| title | *string* A title of a listing |\r\n| smallImageUrl | *string* The URL of a listing image size 220px x 165px |\r\n| bigImageUrl | *string* The URL of a listing image size 360px x 270px |\r\n| price | *integer* Price of a listing in dollar per duration |\r\n| duration | *integer* Duration of a listing |\r\n| shortDescription | *string* Short description of a listing |\r\n| descriptionHtml | *string* Description of a listing. It contains html content. |\r\n| prerequisiteHtml | *string* A listing is required to be taken before taking a listing. It contains html content |\r\n| url | *string* Relative URL of a listing |\r\n| tags | *string* |\r\n| availability | *boolean* Availability of a listing |\r\n| materials | *Array of Material objects* A list of listing materials |\r\n| portfolios | *Portfolio object* A portfolio for the listing |\r\n| teamMember | *Team Member object* Details of a team member providing a listing |\r\n| category | *string* The name of category that a listing is classified |\r\n\r\n## Material\r\n\r\nThis is an object to represent a material attached to a listing. eg worksheet or file download.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| id | *integer* An unique integer identifier of a material |\r\n| fileName | *string* Actual file name of a material |\r\n| name | *string* The name of a material |\r\n| description | *string* Description of a material |\r\n| downloadUrl | *string* Download URL of a material. Download URL is only provided when an user booked a listing |\r\n\r\n## Paging Information\r\n\r\nThis is an object to represent paging information for the current result set.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| number | *integer* Current page number |\r\n| size | *integer* The number of results to be returned per page |\r\n| totalResults | *integer* The total number of results |\r\n\r\n## Portfolio\r\n\r\nThis is an object to represent a portfolio item of a store or a team member.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| id | *integer* An unique integer identifier of a portfolio |\r\n| sequence | *integer* Sequence of portfolio |\r\n| portfolioAsset | *PortfolioAsset Object*\r\n\r\n### Portfolio Asset\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| id | *integer* An unique integer identifier of a portfolio asset |\r\n| assetType | *integer* A type of an asset (1: Video, 2: Document and 3: Image) |\r\n| assetTypeName | *string* The name of an asset (none, Video, Document and Image) |\r\n| imageUrl | *string* Asset's image UrlWhen an asset type is image, this field is set |\r\n| imageThumbUrl | *string* Asset's image thumb UrlWhen an asset type is image, this field is set |\r\n| videoUrl | *string* Asset's video UrlWhen an asset type is video, this field is set |\r\n| comment | *string* Explain about what a document is. When an asset type is document, this field is set |\r\n| documnetUrl | *string* Asset's document Url. When an asset type is document, this field is set |\r\n| documentThumbUrl | *string* Asset's document thumb Url. When an asset type is document, this field is set |\r\n\r\n\r\n# Template Pages\r\n\r\nThis outlines each page in an Expertory store and the properties available to the template.\r\n\r\n> To view the properties available on a page add `.json` to the end of the page you are requesting. eg http://yourstore.expertory.com/.json .\r\n> This can also be used as an API for retrieving data.\r\n\r\n## Listing \r\n`listing.liquid`\r\n\r\nContains a single listing provided by a store.\r\n\r\nHttp Method: `GET`\r\n\r\nRequest URL Pattern: `/{category}/{name}/{id}`\r\n\r\n`{category}`: the name of a category (url safe)\r\n`{name}`: the name of a listing (url safe)\r\n`{id}`: A unique integer identifier of a listing\r\n\r\n> `{category}` and `{name}` are not validated and can essentially contain any string. They are part of the URL for SEO purposes.\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| store | *Store Object* Store basic details providing a listing |\r\n| session | *Session Object* Current user's details |\r\n| listing | *Listing Object* the listing |\r\n\r\n## Store Landing \r\n`home.liquid`\r\n\r\nThe index / home page of a store.\r\n\r\nHttp Method: `GET`\r\n\r\nUrl Pattern: `/`\r\n\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| store | *Store Object* Store basic details |\r\n| session | *Session Object* Current user's details |\r\n| banner | *string* The URL of a store's banner image |\r\n| about | *string* Explanation of a store |\r\n| portfolios | *Array of Portfolio objects* A list of portfolio items of a store |\r\n| listings | *Array of Listing objects* A list of live session listings provided by a store |\r\n| teamMembers | *Array of TeamMember objects* A list of team members belonging to a store |\r\n\r\n## Team Member Profile\r\n`profile.liquid`\r\n\r\nTeam member's profile page.\r\n\r\nHttp Method: `GET`\r\n\r\nUrl Pattern:  `/{displayname}`\r\n\r\n`{ displayname }`: an unique display name of a team member\r\n\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| store | *Store Object* Store basic details |\r\n| session | *Session Object* Current user's details |\r\n| teamMember | *Team Member object* Details of a team member |\r\n| listings | *Array of Listing objects* A list of live session listings provided by a team member |\r\n\r\n\r\n## Search Results\r\n`search.liquid`\r\n\r\nSearch results page\r\n\r\nHttp Method: `GET`\r\n\r\nUrl Patterns:  \r\n\r\n* `/search/{query}?page={number}`\r\n* `/search?query={query}&page={number}`\r\n\r\n`{query}`: keyword used to search listings\r\n`{number: integer)`: page number (if page number is not set, it returns the first page of the results)\r\n\r\n\r\n\r\n| Attributes | --- |\r\n| --- | --- |\r\n| store | *Store Object* Store basic details |\r\n| session | *Session Object* Current user's details |\r\n| search | *Object* `{query: 'query text' }`\r\n| listings | *Array of Listing objects* A list of listings in a category |\r\n| page | *Page Object* Current page's details |\r\n\r\n## Checkout Complete\r\n`checkout-complete.liquid`\r\n\r\n## Customer Dashboard\r\n`dashboard.liquid`\r\n\r\n## Listing Materials\r\n`materials.liquid`\r\n\r\n## Login\r\n`login.liquid`\r\n\r\n## Forgot Password\r\n`forgot-password.liquid`\r\n\r\n## Reset Password\r\n`reset-password.liquid`\r\n\r\n## Package\r\n`package.liquid`\r\n\r\n## Custom Page\r\n`page.liquid`\r\n\r\n## Video Search\r\n`video-search.liquid`\r\n\r\n## Session add to calendar\r\n`session-calendar.liquid`\r\n\r\n## Cancel Booking\r\n`cancel-booking.liquid`\r\n\r\n## Video on demand\r\n`video.liquid`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}